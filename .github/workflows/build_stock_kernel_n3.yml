name: Build OnePlus Nord 3 Stock
on:
  workflow_dispatch:
    inputs:
      FILE:
        type: string
        description: "Configuration file"
        required: true
        default: default
      BUILD_TIME:
        type: string
        description: "Custom build time (Enter F to use current time)"
        required: false
        default: "F"
      SUFFIX:
        type: string
        description: "Custom kernel suffix (leave empty for a random string)"
        required: false
        default: "LuffyOP‚ö°"
      FAST_BUILD:
        type: boolean
        description: "Enable fast build?"
        required: true
        default: true

jobs:
  build:
    name: ${{ github.event.inputs.FAST_BUILD == 'true' && ' [FAST]' || '' }}For ${{ github.event.inputs.FILE }} ${{ github.event.inputs.SUFFIX }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Input Combinations
        run: |
          echo "üîß Validating input combinations..."
          FILE="${{ github.event.inputs.FILE }}"
          
          # Define valid combinations with base model only (no _v/_t/_u...)
          declare -A VALID_COMBINATIONS=(
            ["default"]="mt6983 android12 5.10"
          )

          # Recursively strip "_[a-z]+" suffixes to match base key
          get_combination() {
            local key="$1"
            while true; do
              if [[ -n "${VALID_COMBINATIONS[$key]+_}" ]]; then
                echo "${VALID_COMBINATIONS[$key]}"
                return 0
              fi
              if [[ "$key" =~ ^(.+)_([a-z]+)$ ]]; then
                key="${BASH_REMATCH[1]}"
              else
                return 1
              fi
            done
          }

          # Try to resolve FILE to a valid combination
          COMBINATION="$(get_combination "$FILE")" || {
            echo "‚ùå Unknown FILE: $FILE"
            echo "Valid base models:"
            for model in "${!VALID_COMBINATIONS[@]}"; do
              echo "- $model: ${VALID_COMBINATIONS[$model]}"
            done
            exit 1
          }

          # Split the combination into fields
          read CPU ANDROID_VERSION KERNEL_VERSION <<< "$COMBINATION"

          echo "‚úÖ Valid combination: FILE=$FILE, CPU=$CPU, ANDROID_VERSION=$ANDROID_VERSION, KERNEL_VERSION=$KERNEL_VERSION"
          
          # Export to environment
          echo "CPU=$CPU" >> $GITHUB_ENV
          echo "ANDROID_VERSION=$ANDROID_VERSION" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          
          # Set BUILD_METHOD based on ANDROID_VERSION and KERNEL_VERSION
          if [[ "$ANDROID_VERSION" == "android12" && "$KERNEL_VERSION" == "5.10" ]]; then
            echo "BUILD_METHOD=perf" >> $GITHUB_ENV
          else
            echo "BUILD_METHOD=gki" >> $GITHUB_ENV
          fi

      # - name: Check Disk Space
      #   run: df -h

      # - name: Maximize Build Space
      #   uses: easimon/maximize-build-space@master
      #   with:
      #     root-reserve-mb: 8192
      #     temp-reserve-mb: 2048
      #     remove-dotnet: 'true'
      #     remove-android: 'true'
      #     remove-haskell: 'true'
      #     remove-codeql: 'true'

      # - name: Create and Enable 3G Swap
      #   run: |
      #     sudo swapoff -a
      #     sudo fallocate -l 3G /swapfile
      #     sudo chmod 600 /swapfile
      #     sudo mkswap /swapfile
      #     sudo swapon /swapfile
      #     free -h

      - name: Set Cache Environment
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${{ github.event.inputs.FILE }}" >> $GITHUB_ENV
          mkdir -p "$HOME/.ccache_${{ github.event.inputs.FILE }}"
          echo "set: $HOME/.ccache_${{ github.event.inputs.FILE }}"

      - name: Configure Git
        run: |
          git config --global user.name "Luffy-456"
          git config --global user.email "anshuman567.in@gmail.com"


      - name: Configure APTC
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: Set APT Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/build_stock_kernel_n3.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Debug Show Selected Inputs
        run: |
          echo "Selected CPU: ${{ env.CPU }}"
          echo "Selected ANDROID_VERSION: ${{ env.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ env.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ env.BUILD_METHOD }}"
          echo "Selected FILE: ${{ github.event.inputs.FILE }}"
          echo "Custom BUILD_TIME: ${{ github.event.inputs.BUILD_TIME }}"
          echo "Custom SUFFIX: ${{ github.event.inputs.SUFFIX }}"
          echo "Selected FAST_BUILD: ${{ github.event.inputs.FAST_BUILD }}"

      - name: Install Dependencies
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip
          sudo apt install -y libelf-dev ccache llvm lld
          sudo apt update -qq

      # - name: Restore Ccache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ env.CCACHE_DIR }}
      #     key: ccache-${{ runner.os }}-${{ github.ref_name }}-${{ github.event.inputs.FILE }}-${{ env.BUILD_METHOD }}-${{ github.event.inputs.FAST_BUILD == 'true' && 'alpha' || 'beta' }}-15

      # - name: Initialize Ccache
      #   run: |
      #     INIT_FLAG="${{ env.CCACHE_DIR }}/.ccache_initialized"
      #     if command -v ccache >/dev/null 2>&1; then
      #       if [ ! -f "$INIT_FLAG" ]; then
      #         echo "Initializing ccache (${{ env.CCACHE_DIR }})..."
      #         mkdir -p "${{ env.CCACHE_DIR }}"
      #         ccache -M ${{ env.CCACHE_MAXSIZE }}
      #         touch "$INIT_FLAG"
      #         echo "ccache initialization complete"
      #       else
      #         echo "ccache already initialized, skipping"
      #       fi
      #     else
      #       echo "ccache not installed, skipping"
      #     fi
      #     ccache -s

      - name: Install Repo Tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize Repo and Sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/darklord4567/test.git -m ${{ github.event.inputs.FILE }}.xml --depth=1
          repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync

      # - name: Copy Build Configuration
      #   run: |
      #     echo "pwd cmd"
      #     pwd
      #     echo "ls cmd"
      #     ls
      #     echo "cd kernel_workspace CMD!!!!!!!!!"
      #     cd kernel_workspace
      #     echo "pwd cmd!!!!!!!!!!!!!!!"
      #     pwd
      #     echo "ls cmd!!!!!!!!!!!!!!!!!"
      #     ls
      #     git clone https://github.com/darklord4567/kerenel_build_n3.git build_config
      #     cp -v build_config/build.config.oplus6983 kernel-5.10/
      #     echo "cd kernel-5.10 cmd"
      #     cd kernel-5.10
      #     echo "ls cmd"
      #     ls
      #     echo "pwd cmd"
      #     pwd
      #     echo "validate the file"
      #     ls -ls kernel_workspace/kernel-5.10/build.config.oplus6983
      - name: Copy Build Configuration
        run: |
          git clone https://github.com/darklord4567/kerenel_build_n3.git kernel_workflow
          cp -v kernel_workflow/build.config.oplus6983 kernel_workspace/kernel-5.10/
          echo "ls cmd!!!!!!!!!"
          ls
          echo "pwd cmd!!!!!!!!!!!"
          pwd
          echo "cd kernel_workspace/kernel-5.10 cmd!!!!!!!!!!"
          cd kernel_workspace/kernel-5.10
          echo "ls cmd!!!!!!!!!"
          ls
          echo "pwd cmd!!!!!!!!!!!"
          pwd
          echo "validate the file"
          ls -ls build.config.oplus6983


      - name: Add in bash.rc
        run: |
          echo "BUILD_CONFIG=kernel-5.10/build.config.oplus6983" >> $GITHUB_ENV

      - name: Vendor Issue Fix
        run: |
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "cd kernel_workspace"
          cd kernel_workspace
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "cd kernel_module"
          cd kernel_module
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "cd .."
          cd ..
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "moving every thing one dir up"
          mv kernel_module/vendor .
          echo "pwd"
          pwd
          echo "ls"
          ls
          cd ..
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "rm -rf kernel_module"
          rm -rf kernel_module
          
      - name: Create thermal Makefile
        run: |
          echo "pwd"
          pwd
          echo "ls"
          ls
          echo "cd kernel_workspace"
          cd kernel_workspace
          echo "pwd"
          pwd
          echo "ls"
          ls
          cd vendor/oplus/kernel/cpu/thermal && \touch Makefile && \
          echo "obj-y += horae_shell_temp" > Makefile && \
          echo "obj-y += oplus_ipa_thermal" >> Makefile
          echo "THERMAL MAKEFILE!!!!!!!!!!!!"
          cat vendor/oplus/kernel/cpu/thermal/Makefile

      # # Custom kernel suffix
      # - name: Custom Kernel Suffix if set
      #   if: ${{ github.event.inputs.SUFFIX != '' }}
      #   run: |
      #     cd kernel_workspace
      #     SUFFIX="${{ github.event.inputs.SUFFIX }}"
      #     ANDROID_VERSION="${{ env.ANDROID_VERSION }}"
      #     FAST_BUILD="${{ github.event.inputs.FAST_BUILD }}"

      #     for path in \
      #       kernel_platform/common/scripts/setlocalversion \
      #       kernel_platform/msm-kernel/scripts/setlocalversion \
      #       kernel_platform/external/dtc/scripts/setlocalversion; do

      #       [ -f "$path" ] || continue

      #       echo "Modifying: $path"

      #       # Remove -dirty
      #       sed -i 's/ -dirty//g' "$path"
      #       sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"

      #       if grep -q 'KERNELVERSION.*scm_version' "$path"; then
      #         echo "Detected NEW setlocalversion format"
      #         sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"\${KERNELVERSION}-${ANDROID_VERSION}-${SUFFIX}\"|" "$path"

      #       elif grep -q 'echo "\$res"' "$path"; then
      #         echo "Detected OLD setlocalversion format"
      #         if [ "$FAST_BUILD" = "true" ]; then
      #           echo "FAST_BUILD enabled: using static res"
      #           sed -i "s/^res=.*/res=\"-${ANDROID_VERSION}-${SUFFIX}\"/" "$path"
      #         else
      #           echo "Standard build: injecting suffix via cut/echo"
      #           if [[ -f ./kernel_platform/build_with_bazel.py ]]; then
      #             echo "When using the official script and building with build_with_bazel, the build may fail due to a limit on the number of special characters. Please modify the configuration if that happens."
      #           fi
      #           tac "$path" | sed "0,/echo \"\\\$res\"/s//res=\\\$(echo \\\$res | cut -d- -f1-2)-${SUFFIX}; echo \"\\\$res\";/" | tac > "$path.tmp" && mv "$path.tmp" "$path"
      #         fi
      #       else
      #         echo "Unknown format, appending echo manually"
      #         echo "echo \"\$res-${SUFFIX}\"" >> "$path"
      #       fi

      #       chmod +x "$path"
      #     done

      #     git add -A
      #     git commit -m "Custom suffix & removed -dirty"


      - name: Get Kernel Suffix
        id: suffix_step
        run: |
          if [ "${{ github.event.inputs.SUFFIX }}" != "" ]; then
            echo "suffix=${{ github.event.inputs.SUFFIX }}" >> "$GITHUB_OUTPUT"
          else
            echo "suffix=${{ steps.random_suffix_step.outputs.suffix }}" >> "$GITHUB_OUTPUT"
          fi

      # Custom kernel build time, do not add #1 SMP PREEMPT
      - name: Custom BUILD_TIME
        if: ${{ github.event.inputs.BUILD_TIME != '' && !contains('Ff', github.event.inputs.BUILD_TIME) }}
        shell: bash
        run: |
          DATESTR="${{ github.event.inputs.BUILD_TIME }}"
          echo "KBUILD_BUILD_TIMESTAMP=${DATESTR}" >> "$GITHUB_ENV"
          echo "KBUILD_BUILD_VERSION=1" >> "$GITHUB_ENV"
          cd kernel_workspace/kernel_platform/
          for f in common/scripts/mkcompile_h msm-kernel/scripts/mkcompile_h; do
            if [ -f "$f" ]; then
              echo "Patching mkcompile_h with BUILD_TIME=$DATESTR"
              if grep -q 'UTS_VERSION=' "$f"; then
                perl -pi -e "s{UTS_VERSION=\"\\\$\\(.*?\\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $DATESTR\"}" "$f"
              else
                perl -0777 -pi -e "s{cat <<EOF}{cat <<EOF\n#undef UTS_VERSION\n#define UTS_VERSION \"#1 SMP PREEMPT $DATESTR\" } unless /UTS_VERSION/" "$f"
              fi
            fi
          done

      # - name: Enable lto=thin For FAST
      #   if: ${{ (env.KERNEL_VERSION == '5.10' || env.KERNEL_VERSION == '5.15') && github.event.inputs.FAST_BUILD == 'true' }}
      #   run: |
      #     pwd
      #     ls
      #     cd kernel_workspace
      #     pwd
      #     ls
      #     cd kernel-5.10
      #     ls
      #     DEFCONFIG=./arch/arm64/configs/gki_defconfig
      #     echo "Enabling ThinLTO in $DEFCONFIG"
      #     sed -i 's/^CONFIG_LTO=n/CONFIG_LTO=y/' "$DEFCONFIG"
      #     sed -i 's/^CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
      #     sed -i 's/^CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
      #     grep -q '^CONFIG_LTO_CLANG_THIN=y' "$DEFCONFIG" || echo 'CONFIG_LTO_CLANG_THIN=y' >> "$DEFCONFIG"

      - name: Build Kernel FAST
        if: ${{ github.event.inputs.FAST_BUILD == 'true' }}
        id: fast_build
        run: |
          # # 1. Set the PATH to the toolchain downloaded by your new manifest
          # export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/bin:$PATH"
          # export PATH="/usr/lib/ccache:$PATH"
          # export CC="ccache clang"

          # # 3. Change to the correct kernel source directory
           echo "cd kernel_workspace/ !!!!!!!!"
           cd kernel_workspace/
           echo "pwd cmd !!!!!!!"
           pwd
           echo "ls cmd !!!!!!!!!"
           ls

          # # 4. Define the build arguments with corrected paths and syntax
          # MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
          #   PAHOLE=../kernel_platform/prebuilts/kernel-build-tools/linux-x86/bin/pahole \
          #   LD=/usr/bin/ld.lld HOSTLD=/usr/bin/ld.lld KCFLAGS+='-Wno-error -Wno-error=strict-prototypes'"

          # 5. Add LLVM_IAS if needed for kernel 5.10
          #if [[ "${{ env.KERNEL_VERSION }}" == "5.10" ]]; then
          #  MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
          #fi

          # 6. Run the build
          # make -j$(nproc --all) O=out $MAKE_ARGS gki_defconfig
          # make -j$(nproc --all) O=out $MAKE_ARGS
          ./build/build.sh
          ccache -s


      - name: Create AnyKernel3 Zip
        run: |
          git clone https://github.com/osm0sis/AnyKernel3.git

          # Correct path to the kernel image from the build step
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image.gz AnyKernel3/

          # Correct path to find kernel modules
          mkdir -p AnyKernel3/modules
          find kernel_workspace/kernel_platform/common/out -type f -name "*.ko" -exec cp -f {} AnyKernel3/modules/ \;

          cd AnyKernel3
          # Correctly reference the suffix from the step we created
          zip -r9 ../Kernel-OnePlus-Nord-3-${{ steps.suffix_step.outputs.suffix }}.zip * -x .git README.md

      - name: Set zip Suffix
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.VFS == 'true' && '_VFS' || '' }}${{ github.event.inputs.ZRAM == 'true' && '_LZ4KD' || '' }}${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}${{ github.event.inputs.SCHED== 'true' && '_SCHED' || '' }}" >> $GITHUB_OUTPUT

      # Get the applicable Android version information from the OnePlus source code.
      # Note that this is the system Android version, not the kernel Android version you entered.
      # This step may need to be modified or deleted for non-OnePlus official source code.
      - name: Auto map FILE to Android version by manifest
        id: file_clean
        run: |
          file="${{ github.event.inputs.FILE }}"
          cpu="${{ env.CPU }}"
          xml=".repo/manifests_fallback/${file}.xml"
          cd $GITHUB_WORKSPACE
          file_base=$(echo "$file" | sed -E 's/_[a-z]$//')
          revision_full=$(grep -oP '<project[^>]*name="android_kernel[^"]*"[^>]*revision="\K[^"]+' "$xml" | head -n1 || true)
          if [ -n "$revision_full" ]; then
            android_ver=$(echo "$revision_full" | grep -oP '_v?_?\K([0-9]+\.[0-9]+(?:\.[0-9]+)?)' || true)
            if [ -n "$android_ver" ]; then
              clean_file="${file_base}_Android${android_ver}"
            else
              clean_file="${file_base}_AndroidUnknown"
            fi
          else
            clean_file="${file_base}_AndroidUnknown"
          fi
          echo "value=$clean_file" >> "$GITHUB_OUTPUT"

      - name: Upload Kernel Zip
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-OnePlus-Nord-3-${{ steps.suffix_step.outputs.suffix }}
          path: Kernel-OnePlus-Nord-3-*.zip

      - name: Post-build Disk Check
        run: df -h
